/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { MeshStandardMaterial, Texture } from 'three';
import React, { useEffect, useState } from 'react';
import { useGLTF, useTexture } from '@react-three/drei';
import { Cartridge } from '../../App';
import { RepeatWrapping } from 'three/src/constants';
import { GLTF } from 'three-stdlib';

interface ITextureMapSet {
    color: Texture,
    alpha: Texture,
    roughness: Texture,
    normal: Texture
}

enum MaterialName {
    FIRST = 'main',
    SECOND = 'wyswietlacz',
    THIRD = 'szklo',
    FOURTH = 'zlacze szklo',
    FIFTH = 'hash hill',
}

/**
 * TODO: Change texture assets dynamically
 * @param props TODO
 * @constructor TODO
 */
export default function CartridgeModel({ cartridge = Cartridge._ }: { cartridge?: Cartridge }) {
    const [model, setModel] = useState(useGLTF('/assets/models/pusty/cartridge pusty.gltf'));

    const models: { [p: number]: GLTF } = {
        [Cartridge.GOLD]: useGLTF('/assets/models/zloty/cartridge zloty.gltf'),
        [Cartridge.RAINBOW]: useGLTF('/assets/models/teczowy/cartridge teczowy.gltf'),
        [Cartridge.SILVER]: useGLTF('/assets/models/szary/cartridge szary.gltf'),
        [Cartridge._]: useGLTF('/assets/models/pusty/cartridge pusty.gltf')
    };

    const textureMap: { [p: number]: ITextureMapSet } = {
        [Cartridge.GOLD]: {
            color: useTexture('/assets/models/zloty/cartridge low substance_zloty_BaseColor2k.jpg'),
            alpha: useTexture('/assets/models/zloty/cartridge low substance_zloty_BaseColor2k-cartridge low substance_zloty_Opacity2k.png'),
            roughness: useTexture('/assets/models/zloty/cartridge low substance_zloty_Metallic2k-cartridge low substance_zloty_Roughness2k.png'),
            normal: useTexture('/assets/models/zloty/cartridge low substance_UNIWERSALNY_NormalDithering2k.png')
        },
        [Cartridge.RAINBOW]: {
            color: useTexture('/assets/models/teczowy/cartridge low substance_teczowy_BaseColor2k.jpg'),
            alpha: useTexture('/assets/models/teczowy/cartridge low substance_teczowy_BaseColor2k-cartridge low substance_teczowy_Opacity2k.png'),
            roughness: useTexture('/assets/models/teczowy/cartridge low substance_teczowy_Metallic2k-cartridge low substance_teczowy_Roughness2k.png'),
            normal: useTexture('/assets/models/teczowy/cartridge low substance_UNIWERSALNY_NormalDithering2k.png')
        },
        [Cartridge.SILVER]: {
            color: useTexture('/assets/models/szary/cartridge low substance_szary_BaseColor2k.jpg'),
            alpha: useTexture('/assets/models/szary/cartridge low substance_szary_BaseColor2k-cartridge low substance_szary_Opacity2k.png'),
            roughness: useTexture('/assets/models/szary/cartridge low substance_szary_Metallic2k-cartridge low substance_szary_Roughness2k.png'),
            normal: useTexture('/assets/models/szary/cartridge low substance_UNIWERSALNY_NormalDithering2k.png')
        },
        [Cartridge._]: {
            color: new Texture(),
            alpha: new Texture(),
            roughness: new Texture(),
            normal: new Texture()
        }
    };

    const mapTextures: { [p: string]: (nodeMaterial: MeshStandardMaterial) => void } = {
        [MaterialName.FIRST]: (nodeMaterial: MeshStandardMaterial) => {
            nodeMaterial.normalMap = textureMap[cartridge].normal;
            nodeMaterial.map = textureMap[cartridge].color;
            nodeMaterial.roughnessMap = textureMap[cartridge].roughness;
        },
        [MaterialName.SECOND]: (nodeMaterial: MeshStandardMaterial) => {
            /** Fully dynamic */
        },
        [MaterialName.THIRD]: (nodeMaterial: MeshStandardMaterial) => {
            /** Solid colors only */
        },
        [MaterialName.FOURTH]: (nodeMaterial: MeshStandardMaterial) => {
            nodeMaterial.normalMap = textureMap[cartridge].normal;
            nodeMaterial.map = textureMap[cartridge].alpha;
            nodeMaterial.roughnessMap = textureMap[cartridge].roughness;
        },
        [MaterialName.FIFTH]: (nodeMaterial: MeshStandardMaterial) => {
            nodeMaterial.normalMap = textureMap[cartridge].normal;
            nodeMaterial.map = textureMap[cartridge].alpha;
            nodeMaterial.roughnessMap = textureMap[cartridge].roughness;

            nodeMaterial.map.wrapS = RepeatWrapping;
            nodeMaterial.map.wrapT = RepeatWrapping;
        }
    };

    useEffect(() => {
        // model.scene.traverse(node => {
        //     if (node.type !== 'Mesh') {
        //         return;
        //     }
        //
        //     const nodeMaterial = ((node as Mesh).material as MeshStandardMaterial);
        //
        //     if (cartridge !== Cartridge._) {
        //         mapTextures[nodeMaterial.name](nodeMaterial);
        //     }
        // });

        setModel(models[cartridge]);
    }, [cartridge]);

    return (
        <primitive object={model.scene} />
    );
}

useGLTF.preload('/assets/models/pusty/cartridge pusty.gltf');
